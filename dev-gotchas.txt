This is a log, here I am listing the gotchas that I stepped upon as a developer.
Maybe someone will find this to be of any use, at least it is useful to me, so as not to step onto the same rake twice.
(should have started a log like this ages ago ...)



---22/06/21 02:41:22----------------------

the term 'opionionated' as used in software https://stackoverflow.com/questions/802050/what-is-opinionated-software

" Opinionated software means that there is basically one way (the right way™) to do things and trying to do it differently will be difficult and frustrating. On the other hand, doing things the right way™ can make it very easy to develop with the software as the number of decisions that you have to make is reduced and the ability of the software designers to concentrate on making the software work is increased"

https://books.google.com/ngrams/graph?content=opinionated+software&year_start=1800&year_end=2019&corpus=26&smoothing=3&direct_url=t1%3B%2Copinionated%20software%3B%2Cc0#t1%3B%2Copinionated%20software%3B%2Cc00

google ngram viewer says the term took off during 2003, peak usage during 2009. An often cited example of 'opinionated software' is 'ruby on rails' or 'spring boot'  


Here https://dzone.com/articles/perils-of-opinionated-frameworks-like-spring-boot spring boot is criticised for being 'too opinionated'; it brings in a lot of dependencies (jpa, netty for grpc, etc. etc. etc.) he says that the choice of spring boot therefore determines a lot of choices up front... (like the versions of the dependent packages that must be used)

The opposite of 'opinionated software' is the perl philosophy of 'There's more than one way to do it' https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it (or here http://wall.org/~larry/pm.html )

I think that 'opinionated software' often starts where there are a lot of dependencies; then comes the 'spring boot' layer on top of this mess, that also binds you to a specific way of doing things, that is supposed to make life simpler. More centralisation may bring more certainty, but it drastically limits freedom.


---22/06/21 01:38:59----------------------

today i learned  that okta is charging per created user https://www.okta.com/pricing/
that's how you do business, never thought of such an option...

---21/06/21 17:38:22----------------------

Magic alias that removes spaces from file names and puts _ instead of them. Works on osx!
(from here https://stackoverflow.com/questions/2709458/how-to-replace-spaces-in-file-names-using-a-bash-script )

alias nospaceinfilenames='for f in *\ *; do mv "$f" "${f// /_}"; done'

Other goodies: ps sorted by cpu and memory. also less -R can browse through output with colors! (should be a default behavior, in my opinion)

alias pstopcpu="ps -eo pcpu,pid,user,args | sort -n -k 1 -r | awk '"'{ $1="\033[31m"$1"%\033[0m"; $4="\033[31m"$4"\033[0m"; print }'"' | less -R"


pstopmem_usage="list processes with top memory usage on top (first column in red)"
alias pstopmem="ps -eo vsz,pid,user,args | sort -n -k 1 -r | awk '"'{ $1="\033[31m"$1 / 1000"Mib\033[0m"; $4="\033[31m"$4"\033[0m"; print }'"' | less -R"


---21/06/21 16:55:34----------------------

stackoverflow search got much better. Once upon a time google search was preferable, now it makes sense to use stackoverflow search...

i wonder if they are still using elasticsearch only for search. Elasticsearch used TF/IDF algorithm, but stored the word count separately for each shard.

Here they say that now they are also using Okapi BM25 https://www.elastic.co/guide/en/elasticsearch/reference/current/similarity.html (but that one is also doing inverse term frequency)


---21/06/21 16:30:32----------------------

show dependecies with gradle

    cd <directory of sub project>

    gradle -q dependencies

keeping all the dependency versions happy is a challenge....

---21/06/21 16:14:48----------------------

On the github page: a comment with /retest will cause the CI to rerun the build and test. (/rebuild doesn't work).
This may be a feature of the particular CI scripts that we are using, don't know.

---21/06/21 15:49:21----------------------

gradle, oh gradle.

gradle cleanTest  test --fail-fast 2>&1 | tee log.log


- without cleanTest it will not rerun the tests after a successful run (why?)
- --fail-fast tell it to stop on the first test failure (much easier to debug the tests this way).\

I have the following function in my .bashrc file (and it's always better to keep a log of that compilation/test run)


function makeIt {
    if [[ -f build.gradle ]]; then
        cmd=$1
        if [[ $cmd == "" ]]; then
            gradle cleanTest  test --fail-fast 2>&1 | tee log.log
            #gradle cleanTest build  2>&1 | tee log.log
        else
            gradle "$@" 2>&1 | tee log.log
        fi
    else
        if [[ -f pom.xml ]]; then
            cmd=$1
            if [[ $cmd == "" ]]; then
                mvn compile 2>&1 | tee log.log
            else
                mvn "$@" 2>&1 | tee log.log
            fi
        else
            if [[ -f Makefile  ]] || [[ -f makefile ]] || [[ -f GNUmakefile ]]; then
                make "$@" 2>&1 | tee log.log
            else
                echo "don't know how to make this, yet"
            fi
        fi
    fi
}

alias m='makeIt'

---21/06/21 15:47:12----------------------

java will start to omit stack traces, without this option. -XX:-OmitStackTraceInFastThrow

Why did they do that? Why?



