
- first dynamic programming languages with optional typing seems to have been common lisp (1985). Then came Typescript - since then lots of other dynamic programming language have adopted the idea (Python 3.5 https://docs.python.org/3/library/typing.html - 2015, PHP 7 - in 2015 ...)

- Javascript has lots of these supersets for adding optional typing: typescript (developed by Microsoft) there are others: Closure (google - https://developers.google.com/closure/compiler/) and flow (Facebook - https://flow.org/ )  ::: but Typescript is most popular (and the first one of these) Even javascript is working on a proposal! (https://github.com/tc39/proposal-type-annotations)

- typescript: superset of javascript, adds *optional* type annotation, acts as a preprocessor (translates *.ts into *.js)
    see short intro: https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html
    full book: https://www.typescriptlang.org/docs/handbook/2/basic-types.html

- install it: https://www.typescriptlang.org/download
    npm install -g typescript

    tsc - that's the preprocessor, it is looking for tsconfig.js file - with lots of options... (but that is not mandatory!)

-  structural typing - if two objects have the same shape, they are considered to be of the same type.


        // declaration of a type in ts
        interface Point {
          x: number;
          y: number;
        }

        // p : Point = require argument p of type P
        function logPoint(p: Point) {
          console.log(`${p.x}, ${p.y}`);
        }

        // the proper declaration would be cont point : Point = { x : 12, y : 26 }
        const point = { x: 12, y: 26 };
        logPoint(point);


- if you change stuff, so that they don't comply - then you get a warning.

        // declaration of a type in ts
        interface Point {
          x: number;
          y: number;
        }

        // p : Point = require argument p of type P
        function logPoint(p: Point) {
          console.log(`${p.x}, ${p.y}`);
        }

        // the proper declaration would be cont point : Point = { x : 12, y : 26 }
        const point = { x: 12, y: '26' };
        logPoint(point);

- now compiling this to javascript gives the warning (output is till generated by default, despite warning)

    tsc t.ts

    t.ts:14:10 - error TS2345: Argument of type '{ x: number; y: string; }' is not assignable to parameter of type 'Point'.
      Types of property 'y' are incompatible.
        Type 'string' is not assignable to type 'number'.

    14 logPoint(point);
                ~~~~~


    Found 1 error in t.ts:14

-- https://www.typescriptlang.org/tsconfig :: reference of tsconfig
-- generate a tsconfig.json file in current directory (all possible options appear as comments!)

    tsc --init 

-- edit tsconfig.json ::: comment out magic option that does not create json output file if errors have been detected !!!!
    
    "noEmitOnError": true,

-- other very nice options:

     "strict": true /* Enable all strict type-checking options. */,
    "strictNullChecks": true /* Enable strict null checks. */,
    "noImplicitReturns": true /* Report error when not all code paths in function return a value. */,
    "noFallthroughCasesInSwitch": true /* Report errors for fallthrough cases in switch statement. */,


