Standard library reference: https://pkg.go.dev/std

--

- arithmetics: need to cast both operands to the same type (no implicit conversion)

- values:
    There are immutable types:
        numbers, strings

    mutable types:
        slices, maps

- functions: parameters are passed by value.
  Therefore mutable value (such as maps,slices) refer to the same content when passed to a function, so you can modify the content of the map from insde the function
  (here they say that a map value is just a pointer to an implementation object https://stackoverflow.com/questions/40680981/are-maps-passed-by-value-or-by-reference-in-go )

    package main

    import "fmt"

    func foo(num_map map[string]int) {
        num_map["a"] = 42

        fmt.Printf("in function %p %v %T\n", &num_map, num_map, num_map)
    }

    /*
    in function 0xc00004e028 map[a:42 b:2] map[string]int
    out function 0xc00004e020 map[a:42 b:2] map[string]int
    */
    func main() {

        a := map[string]int{
            "a": 1,
            "b": 2,
        }

        foo(a)

        fmt.Printf("out function %p %v %T\n", &a, a, a)
    }

-
  pointers: No pointer arithmetics in golang!!!

--
structures:

syntax for structure methods that get a pointer to vs copy of self/this object is the same.
Same for usage!

Reason: when structure is small: copying it is faster than fiddling with pointers! (redirection costs more than copy)

Now: this doesn't apply for regular arguments (other than receiver - argument delcared as pointer must be passed as pointer!)

Example:

    package main

    import  (
        "math"
        "fmt"
    )

    type Point struct {
        X int
        Y int
    }

    //
    // argument structure is small: copying it is faster than fiddling with pointers! (redirection costs more than copy)
    //
    // It's the same syntax for accessing a struct field in a variable that holds a struct value vs accessing a struct field in a reference to a struct. That's a bit confusing for someone who is coming from the land of C.
    //
    func (self Point) Dist(other Point) float64 {
        arg := (other.X - self.X) * (other.X - self.X) + (other.Y - self.Y) * (other.Y - self.Y)
        return math.Sqrt( float64(arg) )
    }

    func (self *Point) Add(other Point) {
        self.X += other.X
        self.Y += other.Y
    }

    // implement the Stringer interface - this way fmt.Println can show the object!
    func (self Point) String() string {
        return fmt.Sprintf("x: %d y: %d", self.X, self.Y)
    }

    func main() {
        p := Point{10, 20}
        other := Point{30, 40}

        fmt.Println("distance between points: ", p.Dist(other))
        p.Add(other)

        fmt.Println("after moving point: ",p)
    }

--

Some objects/structure explicitly deal with null receivers!!!
You can append write a string to a null strings.Builder
also null slices can be appended to!!!

    package main

    import (
        "fmt"
        "strings"
    )

    func main() {

        // golang doesn'thave a char class - for unicode characters it's 'rune'.
        var slc []rune

        for i := 0; i < 10; i++ {
            // you can append something to an empty null slice!!!
            slc = append(slc, rune('b'))
        }
        fmt.Println(string(slc))

        var sb strings.Builder

        for i := 0; i < 1000; i++ {
            // method WriteString of strings.Builder can cope with null receiver !!!
            sb.WriteString("a")
        }
        fmt.Println(sb.String())

    }
--

Don't write to channel, if no-one is listening. You get panick, when the channel isfull:

    package main

    // writing a channel to full capacity. If no one is listening - panick, deadlock
    func main() {

        /*
        ch := make(chan int)
        ch <- 1  // /*fatal error: all goroutines are asleep - deadlock! */
        */

        ch := make(chan int, 2)
        ch <- 1
        ch <- 2

        ch <- 3
        /*fatal error: all goroutines are asleep - deadlock!

        goroutine 1 [chan send]:
        main.main()
        /home/user/mystuff/my-notes/gostuff/chan1.go:15 +0x56
        */
    }

You can write to a channel capacity + two items

    package main

    import (
        "log"
        "os"
    )

    func makeFib(ch chan int64) {
        logger := log.New(os.Stderr, "", 0)

        n_1 := int64(0)
        n_2 := int64(1)

        idx := 0

        for idx < 20 {
            logger.Println("ch <- :: post: ", idx, n_1)
            ch <- n_1

            num := n_1 + n_2
            n_1 = n_2
            n_2 = num
            idx += 1
        }
        ch <- -1

    }

    /*
    output with capacity == 0 (default)

    Channel capacity: 0
    ch <- :: post:  0 0
    ch <- :: post:  1 1
    <-ch :: received:  0
    <-ch :: received:  1
    ch <- :: post:  2 1
    ch <- :: post:  3 2
    <-ch :: received:  1
    <-ch :: received:  2
    ch <- :: post:  4 3
    ch <- :: post:  5 5
    <-ch :: received:  3
    <-ch :: received:  5
    ch <- :: post:  6 8
    ch <- :: post:  7 13
    <-ch :: received:  8
    <-ch :: received:  13
    ch <- :: post:  8 21
    ch <- :: post:  9 34
    <-ch :: received:  21
    <-ch :: received:  34
    ch <- :: post:  10 55
    ch <- :: post:  11 89
    <-ch :: received:  55
    <-ch :: received:  89
    ch <- :: post:  12 144
    ch <- :: post:  13 233
    <-ch :: received:  144
    <-ch :: received:  233
    ch <- :: post:  14 377
    ch <- :: post:  15 610
    <-ch :: received:  377
    <-ch :: received:  610
    ch <- :: post:  16 987
    ch <- :: post:  17 1597
    <-ch :: received:  987
    <-ch :: received:  1597
    ch <- :: post:  18 2584
    ch <- :: post:  19 4181
    <-ch :: received:  2584
    <-ch :: received:  4181
    <-ch :: received:  -1

    output with capacity == 2 

    Channel capacity: 2
    ch <- :: post:  0 0
    ch <- :: post:  1 1
    ch <- :: post:  2 1
    ch <- :: post:  3 2
    <-ch :: received:  0
    <-ch :: received:  1
    <-ch :: received:  1
    <-ch :: received:  2
    ch <- :: post:  4 3
    ch <- :: post:  5 5
    ch <- :: post:  6 8
    ch <- :: post:  7 13
    <-ch :: received:  3
    <-ch :: received:  5
    <-ch :: received:  8
    <-ch :: received:  13
    ch <- :: post:  8 21
    ch <- :: post:  9 34
    ch <- :: post:  10 55
    ch <- :: post:  11 89
    <-ch :: received:  21
    <-ch :: received:  34
    <-ch :: received:  55
    <-ch :: received:  89
    ch <- :: post:  12 144
    ch <- :: post:  13 233
    ch <- :: post:  14 377
    ch <- :: post:  15 610
    <-ch :: received:  144
    <-ch :: received:  233
    <-ch :: received:  377
    <-ch :: received:  610
    ch <- :: post:  16 987
    ch <- :: post:  17 1597
    ch <- :: post:  18 2584
    ch <- :: post:  19 4181
    <-ch :: received:  987
    <-ch :: received:  1597
    <-ch :: received:  2584
    <-ch :: received:  4181
    <-ch :: received:  -1
    */
    func main() {
        logger := log.New(os.Stderr, "", 0)

        capacity := 0
        logger.Print("Channel capacity: ", capacity)
        ch := make(chan int64, capacity)

        go makeFib(ch)

        var res int64
        for res != -1 {
            res = <-ch
            logger.Println("<-ch :: received: ", res)
        }

    }

